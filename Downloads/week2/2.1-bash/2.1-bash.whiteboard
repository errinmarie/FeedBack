[deck]
readonly = true
cssfile = ../basestyle.css

[slide]
title=Kickstart Backend - 2.1 - Bash

[slide]
title=This GIF again...
markdown : '''
## Keep on climbing!
![Climbing](file://./images/climbing.gif)
'''


[slide]
title=Feedback, tips for studying?


[slide]
title=Administrative topics
markdown : '''

## Review Session

* 2-hour review session / group tutoring / group study session / etc, lead by
  Mark

* Also can participate remotely / online

* Time Options:
    1. Thursday 5-7 ish (for the next 4 Thursdays)
    2. Wednesday 4-6

## Saturday schedule

* Moving study time back?
'''



[slide]
title=Grading
markdown : '''
> ![Spongebob](file://./images/spongebob.jpg)

* 25% - homework (personal project)
* 35% - group project
* 25% - attendance
* 15% - weekly quizes

### Absence policy
- -10% off total grade per absence
- If you know you'll be gone or remote for a day, get the absence
  excused
- How to "make up" an absence? Watch through the video on your own time, and
  attempt the activities we do in class, then zip up and submit
'''

[slide]
title=Grading
markdown : '''
### We'll give you opportunities as necessary to make up work.
'''


[slide]
title=ACTIVITY 1 - HTML challenge review
browser = ./solutions/1-html-challenge-review-solution.html
editor = ./activities/1-html-challenge-review.html


[slide]
title=SOLUTION - HTML challenge review
browser = ./solutions/1-html-challenge-review-solution.html
editor = ./solutions/1-html-challenge-review-solution.html

[slide]
title=Questions?

[slide]
title=Quiz
markdown : '''
![Spongebob](file://./images/spongebob.jpg)
'''

[slide]
title=Quiz
markdown : '''
1. Cheatsheets put away
2. Laptops closed
3. Put your name at the top
4. Just give it your best! You probably know more than you think.
'''

[slide]
title=This week: Bash + Git

[slide]
title=Bash + Git
markdown : '''
## We'll be learning "real computer use"

Might seem a little retro...

![Hacking](file://./images/hacking.gif)
'''


[slide]
title=CLI
markdown : '''

In the real world, nobody in web development uses "GUI". Instead,
programmers do most of their day-to-day activities via a "CLI".

**Everything you can do in GUI you can also do in CLI. It just looks
different and is all text-only.**

### KEY TERMS
* **CLI** - Command line interface
* **GUI** - Graphical user interface
* **Shell** - A category of programming languages, designed for CLI
* **Bash** - The most popular shell, and the one we'll learn today
  (stands for "bourne again shell" -- a pun)
'''

[slide]
title=DEMO
terminal=~

[slide]
title=ACTIVITY 2 - BASH Challenge
editor=./activities/2-cli-challenge/hints.txt
markdown : '''
* **Instructions:** Each directory has hints for what to do. Perform
  the tasks ONLY using CLI, without using GUI ONLY USING CLI

* **Remember:** Tab is autocomplete! Use it constantly.

* **Warning:** Deleting files or directories with `rm` is permanent.
'''


[slide]
title=DISCUSSION: CLI vs GUI


[slide]
title=Bash with Finesse
markdown : '''
![Finesse](file://./images/bruno_mars_finesse.gif)
'''



[slide]
title=Bash with Finesse
markdown : '''
> ![Finesse](file://./images/bruno_mars_finesse.gif)

### Bash shortcuts
* **Tab** - Autocomplete current command, path, or filename. Hit twice to see
  options.

* **Ctrl+R** - Search through your bash history for a previous command

* **Up/Down** - Go back to a previous command

* **Ctrl+C** - Stop current command

### KEY TERMS
* **bash history** - like browser history, bash keeps track of all
  that you do
* **home directory** - the location of all your user files (/Users/
  on macOS, /home/ on Linux)
* **dot file** - a hidden file that configures something, called this
  because it starts with a dot
* **`.bashrc`** or **`.bash_profile** - a bash script file that sets up your
  bash environment (an example of a dotfile)
* **environment variable** - bash has "settings" that can be set in
  your .bashrc
'''

#[slide]
#title=ACTIVITY: Bash with Finesse
#markdown : '''
#> ![Finesse](file://./images/bruno_mars_finesse.gif)
#
#### Set up
#1. Open up the ".bashrc" file in your home directory
#2. All users: Add the following line (replace with a different
#editor as needed):
#    - `export EDITOR="gedit"`
#3. macOS users: Add the following:
#    - `export PS1="\w$ "`
#'''


[slide]
title=Hacker workout!
markdown : '''
The next exercise is intended to test and improve your Terminal usage
speed.

Open up your terminal.  On your mark... get set...

![Hackers](file://./images/hackers.gif)
'''


[slide]
title=Hacker workout!
markdown : '''
> ![Hackers](file://./images/hackers.gif)

### 5 reps of...

1. `cd` into `/tmp`

2. `ls`

3. Create an empty directory named `rep0`

4. `cd` into the newly created directory

5. Use `touch` to create a new file named `file.txt`

6. `cd` back to the `activities/2-cli-challenge` directory.

7. `ls`

8. Repeat, except for step #3 increase the number by one, e.g. `rep1`, `rep2` `rep3`, etc

BONUS: Try again, except for each step, use `echo` to pipe the words
"repetition 1" into rep1 etc. Can you do 5 reps in less than a
minute?
'''

[slide]
title=Has anyone messed up a group project in school or work and wasn't able to "undo"?

[slide]
title=Now imagine that, but you have 1000s of files... and one mistake could crash the company.

[slide]
title=Git

[slide]
title=Git
markdown : '''
Git is a very powerful (but difficult to learn) tool that. Once
learned, it will solve this problem.

1. It allows a directory to have "undo"

2. It allows a directory to be shared, and more than one person work
on the same files

3. Systematically resolve coding conflicts and facilitate review
processes
'''

[slide]
title=DEMO: Git
terminal=~
markdown : '''
### KEY TERMS
* **git** - Most popular version control system
* **.git** - A called a "local repository", this is where your undo
  history is stored
* **repository** - A directory that is "git enabled", aka "repo"
* **commit** - A commit is a "frozen instance" in time
* **hash** - A number/letter combo that uniquely IDs a commit
* **log** - the history of gits you've done
* **diff** - shows you difference between commits
'''

[slide]
title=ACTIVITY 4: Git
editor=./activities/4-git-challenge-instructions.txt
markdown : '''
### Git commands
* `git init` - Creates a new Git repo in the current directory
* `git add -A` - Adds all files in the current directory to the git repo
* `git commit` - Saves a "commit" (frozen snapshot in time) for the added files
  as they are now
* `git log` - Shows a "log" of recent commits, i.e. your undo history
* `git diff` - Compare one commit to another, see what changed
'''


[slide]
title=Questions?





