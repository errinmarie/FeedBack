{"_id":"jest-each","_rev":"22-2582153c8ba16e26280d5ad5b20a3f28","name":"jest-each","description":"Parameterised tests for Jest","dist-tags":{"latest":"23.6.0","beta":"24.0.0-alpha.6"},"versions":{"0.0.1":{"name":"jest-each","version":"0.0.1","description":"Parameterised tests for Jest","main":"dist/index.js","files":["dist","README.md"],"scripts":{"build":"babel src -d dist --ignore *.spec.js","prepublish":"npm run build","test":"jest","test:coveralls":"npm run test:coverage && cat ./coverage/lcov.info | coveralls","test:coverage":"jest --coverage"},"repository":{"type":"git","url":"git+https://github.com/mattphillips/jest-each.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","bugs":{"url":"https://github.com/mattphillips/jest-each/issues"},"homepage":"https://github.com/mattphillips/jest-each#readme","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.0","babel-jest":"^19.0.0","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-es2015-modules-umd":"^6.24.0","babel-preset-es2015":"^6.24.0","babel-preset-stage-0":"^6.22.0","coveralls":"^2.12.0","jest":"^19.0.2"},"babel":{"presets":["stage-0","es2015"],"plugins":["add-module-exports","transform-es2015-modules-umd"]},"dependencies":{"sprintf-js":"^1.0.3"},"gitHead":"aad86f1483d7319b6f68391b07b0d0febda81860","_id":"jest-each@0.0.1","_shasum":"3787957ef865379350000a3e64b2ac19b4fb3b89","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.7.0","_npmUser":{"name":"mattphillips","email":"matt@mattphillips.io"},"dist":{"shasum":"3787957ef865379350000a3e64b2ac19b4fb3b89","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-0.0.1.tgz"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/jest-each-0.0.1.tgz_1490138270520_0.8970510973595083"},"directories":{}},"0.1.0":{"name":"jest-each","version":"0.1.0","description":"Parameterised tests for Jest","main":"dist/index.js","files":["dist","README.md"],"scripts":{"build":"babel src -d dist --ignore *.spec.js","prepublish":"npm run build","test":"jest","test:coveralls":"npm run test:coverage && cat ./coverage/lcov.info | coveralls","test:coverage":"jest --coverage"},"repository":{"type":"git","url":"git+https://github.com/mattphillips/jest-each.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","bugs":{"url":"https://github.com/mattphillips/jest-each/issues"},"homepage":"https://github.com/mattphillips/jest-each#readme","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.0","babel-jest":"^19.0.0","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-es2015-modules-umd":"^6.24.0","babel-preset-es2015":"^6.24.0","babel-preset-stage-0":"^6.22.0","coveralls":"^2.12.0","jest":"^19.0.2"},"babel":{"presets":["stage-0","es2015"],"plugins":["add-module-exports","transform-es2015-modules-umd"]},"dependencies":{"sprintf-js":"^1.0.3"},"gitHead":"9bd328d9cf37186da85acb057ba5daed702f3314","_id":"jest-each@0.1.0","_shasum":"037dfd97f5aa40fcfc2763c195e7cc877f092f0e","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.2","_npmUser":{"name":"mattphillips","email":"matt@mattphillips.io"},"dist":{"shasum":"037dfd97f5aa40fcfc2763c195e7cc877f092f0e","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-0.1.0.tgz"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/jest-each-0.1.0.tgz_1490778769711_0.05921304738149047"},"directories":{}},"0.2.0":{"name":"jest-each","version":"0.2.0","description":"Parameterised tests for Jest","main":"dist/index.js","files":["dist","README.md"],"scripts":{"build":"babel src -d dist --ignore *.spec.js","prepublish":"npm run build","test":"jest","test:coveralls":"npm run test:coverage && cat ./coverage/lcov.info | coveralls","test:coverage":"jest --coverage"},"repository":{"type":"git","url":"git+https://github.com/mattphillips/jest-each.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","bugs":{"url":"https://github.com/mattphillips/jest-each/issues"},"homepage":"https://github.com/mattphillips/jest-each#readme","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.0","babel-jest":"^19.0.0","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-es2015-modules-umd":"^6.24.0","babel-preset-es2015":"^6.24.0","babel-preset-stage-0":"^6.22.0","coveralls":"^2.12.0","jest":"^19.0.2"},"babel":{"presets":["stage-0","es2015"],"plugins":["add-module-exports","transform-es2015-modules-umd"]},"dependencies":{"sprintf-js":"^1.0.3"},"gitHead":"c4ca56f9780995bf437cf10f5c340067bdd8c950","_id":"jest-each@0.2.0","_shasum":"56a509a60ff4a9fc25c42f00a5eb1f3d34e41cc4","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.7.0","_npmUser":{"name":"mattphillips","email":"matt@mattphillips.io"},"dist":{"shasum":"56a509a60ff4a9fc25c42f00a5eb1f3d34e41cc4","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-0.2.0.tgz"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/jest-each-0.2.0.tgz_1490821511589_0.3940005018375814"},"directories":{}},"0.3.0":{"name":"jest-each","version":"0.3.0","description":"Parameterised tests for Jest","main":"dist/index.js","files":["dist","README.md"],"scripts":{"build":"babel src -d dist --ignore *.spec.js","prepublish":"npm run build","test":"jest --testPathPattern=src","test:coveralls":"npm run test:coverage && cat ./coverage/lcov.info | coveralls","test:coverage":"jest --coverage"},"repository":{"type":"git","url":"git+https://github.com/mattphillips/jest-each.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","bugs":{"url":"https://github.com/mattphillips/jest-each/issues"},"homepage":"https://github.com/mattphillips/jest-each#readme","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.0","babel-jest":"^19.0.0","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-es2015-modules-umd":"^6.24.0","babel-preset-es2015":"^6.24.0","babel-preset-stage-0":"^6.22.0","coveralls":"^2.12.0","jest":"^19.0.2"},"babel":{"presets":["stage-0","es2015"],"plugins":["add-module-exports","transform-es2015-modules-umd"]},"dependencies":{"sprintf-js":"^1.0.3"},"gitHead":"1d5021199c46d91a3cc79161f199b2b6e497ae7e","_id":"jest-each@0.3.0","_shasum":"0ac3f91fd4fca9f036923641d8ca536eb893ec27","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.0","_npmUser":{"name":"mattphillips","email":"matt@mattphillips.io"},"dist":{"shasum":"0ac3f91fd4fca9f036923641d8ca536eb893ec27","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-0.3.0.tgz"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each-0.3.0.tgz_1504711493264_0.8728619769681245"},"directories":{}},"0.3.1":{"name":"jest-each","version":"0.3.1","description":"Parameterised tests for Jest","main":"dist/index.js","files":["dist","README.md"],"scripts":{"build":"babel src -d dist --ignore *.spec.js","prepublish":"npm run build","test":"jest --testPathPattern=src","test:coveralls":"npm run test:coverage && cat ./coverage/lcov.info | coveralls","test:coverage":"jest --coverage"},"repository":{"type":"git","url":"git+https://github.com/mattphillips/jest-each.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","bugs":{"url":"https://github.com/mattphillips/jest-each/issues"},"homepage":"https://github.com/mattphillips/jest-each#readme","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.0","babel-jest":"^19.0.0","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-es2015-modules-umd":"^6.24.0","babel-preset-es2015":"^6.24.0","babel-preset-stage-0":"^6.22.0","coveralls":"^2.12.0","jest":"^19.0.2"},"babel":{"presets":["stage-0","es2015"],"plugins":["add-module-exports","transform-es2015-modules-umd"]},"dependencies":{"sprintf-js":"^1.0.3"},"gitHead":"d0a89b8fa2e5df7c5e2c3b18a833302cc778e397","_id":"jest-each@0.3.1","_shasum":"524f16be24f0e54b2dc54f4281bcac6d3a16c1c6","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.0","_npmUser":{"name":"mattphillips","email":"matt@mattphillips.io"},"dist":{"shasum":"524f16be24f0e54b2dc54f4281bcac6d3a16c1c6","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-0.3.1.tgz"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each-0.3.1.tgz_1504714433306_0.2709587791468948"},"directories":{}},"0.4.0":{"name":"jest-each","version":"0.4.0","description":"Parameterised tests for Jest","main":"dist/index.js","files":["dist","README.md"],"scripts":{"build":"babel src -d dist --ignore *.test.js","prepublish":"npm run build","test":"jest --testPathPattern=src","test:coveralls":"npm run test:coverage && cat ./coverage/lcov.info | coveralls","test:coverage":"jest --coverage"},"repository":{"type":"git","url":"git+https://github.com/mattphillips/jest-each.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","bugs":{"url":"https://github.com/mattphillips/jest-each/issues"},"homepage":"https://github.com/mattphillips/jest-each#readme","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.0","babel-jest":"^19.0.0","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-gwt":"^1.0.0","babel-plugin-transform-es2015-modules-umd":"^6.24.0","babel-preset-es2015":"^6.24.0","babel-preset-stage-0":"^6.22.0","coveralls":"^2.12.0","jest":"^19.0.2"},"babel":{"presets":["stage-0","es2015"],"plugins":["add-module-exports","transform-es2015-modules-umd","gwt"]},"dependencies":{"sprintf-js":"^1.0.3"},"gitHead":"f59c4908f93c1520e3103586cedd8a9b99626ecd","_id":"jest-each@0.4.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"mattphillips","email":"matt@mattphillips.io"},"dist":{"integrity":"sha512-H7i/8DVr5zZ+dckb+5FP/kL+m2V45H1wzthmk4WlaCK0+zb2V3nLkAbEX3UYkeXa3N/HHO3TereBtg2EI9hT2g==","shasum":"0f85365f2f641bc84607b33b9242140cdaf1f6bf","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-0.4.0.tgz","fileCount":6,"unpackedSize":21748,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa56UkCRA9TVsSAnZWagAAnsMP/RQrJbQtYOISWyzg/bv6\n96qr7IXaI5NRCtV0DTJzfWenNVx8QdMIFCen/GJphRegnC0ehZYQl3oNUTk1\nTPQIN7S0xsrPffFcu9oD4rSh0a3ARztOQba2D3+SIHKVk6fYgRAw+S4SYIVV\nEw6k4e2qx6dzlHZ3gbzCOi8w/t4MXbZn4WVWvcOYm1OdS3oIqF/f+VsPMa7o\nkMWI/fAutP1/lceMLD3I4ABffdZksGHXeccsBlrmO/wQVr7+2WBn/sXyLYqK\nyS5sCho7uZg72KddW3me/WQGHBvnxz/0R7jPPrIYjD+A6/o2t/BU1iC7wfps\nJRQg0jaH6SKpIiRFh2SA9b8RVyGhxHYacpC/bzw6S+owwrxavt8WHxygh9vr\nFwaoiIBdralxEbxPGOq2M9Fm2hYyoxxSeuGCMFNPU9RsOc4nAY9pMnPjyFuq\nh9DDVCx/D253Wda86yUNaPtF3nD6Nfixi0bBqqXk6xa8v69H3XjJ1O4hUjZZ\n6tqduPoex7px9dDeIAmQ6ZGO5pTZpvfRjcBgPcwHZ73danYVYTlo5arhN7oh\nTtIRb1fw91JsekpgEdfLHw8FeeVLmIZ3CXk1qDOOqg3nkD8iD5SCtztebwBX\nv7dAPln8zf8Ypfe2Kd1U7/Y9bq4HClz9IpwL12ImszQTHk3jT0UZ8ru7nlCx\npZrG\r\n=EAtA\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_0.4.0_1525130531289_0.04882684586370356"},"_hasShrinkwrap":false},"0.5.0":{"name":"jest-each","version":"0.5.0","description":"Parameterised tests for Jest","main":"dist/index.js","files":["dist","README.md"],"scripts":{"build":"babel src -d dist --ignore *.test.js","prepublish":"npm run build","test":"jest --testPathPattern=src","test:coveralls":"npm run test:coverage && cat ./coverage/lcov.info | coveralls","test:coverage":"jest --coverage"},"repository":{"type":"git","url":"git+https://github.com/mattphillips/jest-each.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","bugs":{"url":"https://github.com/mattphillips/jest-each/issues"},"homepage":"https://github.com/mattphillips/jest-each#readme","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.0","babel-jest":"^19.0.0","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-gwt":"^1.0.0","babel-plugin-transform-es2015-modules-umd":"^6.24.0","babel-preset-es2015":"^6.24.0","babel-preset-stage-0":"^6.22.0","coveralls":"^2.12.0","jest":"^19.0.2"},"babel":{"presets":["stage-0","es2015"],"plugins":["add-module-exports","transform-es2015-modules-umd","gwt"]},"dependencies":{"sprintf-js":"^1.0.3"},"gitHead":"d067f1a82fab8b74216fda43f289f99a8c4b856e","_id":"jest-each@0.5.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"mattphillips","email":"matt@mattphillips.io"},"dist":{"integrity":"sha512-RPd4mCqO6tW5eJBeX/7VT7WKAy+8NpCuW/3/wFJsc9BjI55KEssYwH3nu8kOsZmEwM1MGzAprWpNw4u6V5R7Nw==","shasum":"7065a599e18349163d0dcde40f49f09df6901666","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-0.5.0.tgz","fileCount":6,"unpackedSize":22024,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa56rOCRA9TVsSAnZWagAAR20P/A2hf9s+6uoFwDefpnfV\nKgKI3qoYsYSzCGND09451xVtt2Pme9V6ObNYIM3GhFN31KLcmVMeoi4g6IMw\n5NCjwNU7ksrV1RrNRb4OfCggAr3Z7pLf7an/f1xgsgP/62P3uNuLD8vvMTTn\n+0b+cwSKeLS2tAHDOIzMS9wZBPmlIEfUQBj3uCBMMlUkuAr2adnWrizFgNHa\nW2ulmCyVsuteSOU7ct1ccv0FoOCQ67MloRPxz/YZazIF0U/gzxWHM6xKQDU8\nGeZZgLidWyA1jzbjK+q1qKge5gd83JHI5Xg/0m0QrRa0/3wYjMLIsZ8o4zsx\nyklrxwJ6xRD7PrjSpwtI+n247FOzcaYf3hqqYtOPp48fa7vaTeVCfzUu1YJ6\nZcal83SGBshrDx14k8J+5q7RY+5CjPeoiOxInEvL7QN4T/GVyh+BUgS1Brr4\nTCv3mdKYZyCwzFU1zvou8Be3eB17NaeGrofjJAvscj52qUn/n1C20va5Am4J\ntC2iG/N8/V1NqMNvTcnNto2KTL9J9WMX1IWARngTiZzUkiC12LHz2HPWGXm9\n4wmsR/UlROkdZ5YYt/6Jr/frBLu5Scw0AyraM3sILluqIRYcsSI2WMEw1wCo\nd2pVT/sOWGhZCGvMQtIIjH5bumcrbq92gu2CAhfqT0lD0ICJK5xWLg+/ultn\nZBek\r\n=FwMK\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_0.5.0_1525131982014_0.9776803890183494"},"_hasShrinkwrap":false},"23.0.1":{"name":"jest-each","version":"23.0.1","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","pretty-format":"^23.0.1"},"_id":"jest-each@23.0.1","dist":{"shasum":"a6e5dbf530afc6bf9d74792dde69d8db70f84706","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-23.0.1.tgz","fileCount":9,"unpackedSize":20442,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbCs86CRA9TVsSAnZWagAA7q0QAI25XnnoYl1CxpU7w4jL\nbWd8svvF39Hs73ZF/4TBGd+0RCJPKtUIq7KaM3ckk+YYXhB9yJhOR+YYjE0c\nRv71KXP72uHnyM0cJAlETdMQNqM6WloioRNiDKkSNEafbOeFN/xoKVzCSFfE\nvZbs+OmIWVHskeQThs0h3OytWArs8gIyQbzTSobDZ1AcxC3X0oVhUiAlEMhk\niN6g0DS6umv8c0Ztwlvije7fQ+1kXiErUe5397q7l0mIgi4Ly/wYiJpxziE9\nKN2HxvoiUzCAMEd3HN03IAyQSar+v3yGlHGp8MVq6HKaj/I7HbPNJnpoNs/u\nxKiQQLuU8GbmSvjMKGCqFQbFRjY3tnEIEQp8P95FQr7jIMKfmr2ffyVW4oEL\nH42WydFlV5+etG0vQQ/kHOLXuxjLHaXkTuRvZorKCH/VLZHTWvZUaaf2RIAl\ngh8AcpKjcJqxT8X8JFPuqnL+0c5L521z8B27m9FtAc7S/5TK9WTy6oCFUgmT\nNGQJIS/v2D4PtcJuYU6J3kLkUSocsFwQOlkTS1LOHNDon5FxE3KKbojhqkuC\nDQgjrHWR5/K2HLWn59ilH6lougEU2RE1VIJOBMyA4En+y4IMb+i6Ulhlfr80\n/tXeabW8wBKr1tNVIUzma0UX5enrX3VzfNPqQ+jUpZIn99ArUPhkcQSSTlEP\nImXv\r\n=ihaD\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_23.0.1_1527435065027_0.5491012316785209"},"_hasShrinkwrap":false},"23.0.2":{"name":"jest-each","version":"23.0.2","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","pretty-format":"^23.0.1"},"_id":"jest-each@23.0.2","dist":{"shasum":"fffc601e7857359d4045ea5710c46e2b05efe2d6","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-23.0.2.tgz","fileCount":7,"unpackedSize":17708,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbDuBNCRA9TVsSAnZWagAAOK4QAI6lCfnjF3OV/FuM1kU3\nYpnuQvupdD2yFOuRglc9ovHkNJayCsjHnt1BW2TJ4pT1BsggubJ3qzt7WIhC\nBmyMTpAP+l2HvxYmi+INZ8sowD0R62Znt45GjFQAykahbLDrmMZ1i6ganAyU\n0xlvCKSwvCDm4ukvZHvG4BEKe3Ibx/zLLYt4mAHTYTCFI3liBubQxYFbg15L\nW7G+pVGYSU99QxcJVRDddZQnZbv5tfJYKTiu+EUpUM0szjTIiXEqY9m0lSvm\nuRxHd4SbJeEHjtqrjyUxX2TYj8m/oR+Vnz+mzXCXz1oYC/5UovihIV6LaQmn\ndxFnkVP4dD9jbrtaN2ihM6E0GwpXcz81sTzSwR8WLHxHPVRCQECW++OnZldd\n6ekjswdzft4Lf3y8R4u0FJSkOpGtSZzcnRB7hmyzEGjoWTkdDx24Cn8OotqW\nFLLaqI5A8QWVShfLcng8PHXgO99alklSUWXZ2HMELC1OUgPuBkZlq+lRzXoD\nBe5PwHR9e9FkizulaN20z5EYGEc7kp5PcgINYjD0Ae7/bS86s5sImHoFUGUn\n3oOBdw8HSA3HhQavXm8RL9VFClViyiVyu0r0RzWDtLEIZcsJCYPFRkHd3EbZ\nIL4UiXjY1kLGhseYYms3aUg7PGGYL33MSOf4iADsxEC7+rNhXutmSBPCckaj\n7LTS\r\n=1oRH\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_23.0.2_1527701580229_0.7109127451541974"},"_hasShrinkwrap":false},"23.1.0":{"name":"jest-each","version":"23.1.0","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","pretty-format":"^23.0.1"},"_id":"jest-each@23.1.0","dist":{"shasum":"16146b592c354867a5ae5e13cdf15c6c65b696c6","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-23.1.0.tgz","fileCount":7,"unpackedSize":17708,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbDufnCRA9TVsSAnZWagAAve4P/j7UlPTztkGIAWMpU29u\nv32DnrOfFrRbuGrCF+b3wokyKKFkvlmvU8/5ozGhoy8SVq1gHS9YH/aLgVtP\nvIp7YPgH31sTszCFxxyri2D0pLHk1rR5fhLzTJXAtrvWbmdypfkh2gSkXH4i\nCgF006nAVgzIChtZBytZ7DUjefM1l2ASLOznA4Q8Dz6K1xJUfkWOACo0VT+V\nHqmvKvRCQ/o2J/00bb7s5tfR48W7iiMEWYnd7o9gd04b994PR3duHU0ueyi0\n7qBCqIFdtfZpoIdQMJJfGTmWDkPLFHXq9/m2ybTrvKl6008OSlftys1cbDXu\nD5sam0r5Q3IrQx/5cdPHTuVNg0VQFst6jr5xkUoNWLtFH2Sb4Omt5lH174Bf\n5YlJ9E5/jhH/yE2YbHVfd29lZtOrgVNKH50vCIvUgyhDh2ktWpEXKoNqzbBs\n052SznWGY762E9D9skBdyrKkQYDqkHLcRIOiM5pfvdNKV+bermc5kaDXuZeh\n8m326APF+dQAQ00f8qE/S13ZN1RWls3JRczkEIdRPXhdr5/eycpio9iPRDPf\nf5nyF2yJuwtZwqV24YBvR2vuqVWu8atclyO+oDH2kiC+nApfjPGFizys0DmK\nI3yC0kg2BTaPmO2R2jIaNAzKT3VKL9PSW5mj1WcztaVXKn/EMxLtGnTTiX4X\nZ1fA\r\n=NLx2\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_23.1.0_1527703526725_0.29144298305810423"},"_hasShrinkwrap":false},"23.2.0":{"name":"jest-each","version":"23.2.0","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","pretty-format":"^23.2.0"},"_id":"jest-each@23.2.0","dist":{"shasum":"a400f81c857083f50c4f53399b109f12023fb19d","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-23.2.0.tgz","fileCount":7,"unpackedSize":20247},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_23.2.0_1529935520127_0.9841494071520844"},"_hasShrinkwrap":false},"23.4.0":{"name":"jest-each","version":"23.4.0","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","pretty-format":"^23.2.0"},"_id":"jest-each@23.4.0","dist":{"shasum":"2fa9edd89daa1a4edc9ff9bf6062a36b71345143","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-23.4.0.tgz","fileCount":7,"unpackedSize":20335},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_23.4.0_1531237944811_0.927036555145877"},"_hasShrinkwrap":false},"23.5.0":{"name":"jest-each","version":"23.5.0","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","pretty-format":"^23.5.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"jest-each@23.5.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"dist":{"integrity":"sha512-8BgebQgAJmWXpYp4Qt9l3cn1Xei0kZ7JL4cs/NXh7750ATlPGzRRYbutFVJTk5B/Lt3mjHP3G3tLQLyBOCSHGA==","shasum":"77f7e2afe6132a80954b920006e78239862b10ba","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-23.5.0.tgz","fileCount":4,"unpackedSize":20653,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbbZh2CRA9TVsSAnZWagAAJTQP/2gH3Ae6F0dy9nf8lVbZ\nDrq+hngEg+YDcE1v0Tvk71RKcugpagTxv2qK6k3QVSunmyZdKsXIAAfNsDWa\n+yLWEoX3HfeF3isgzFBZuVdV8R3gyjLXOremiby2hprYGSZYm66dp3WNtap4\nL0YY0acAp+SOTZyd1LNJg1ntGH4biQR5nS1wSlc/cy5mvZbiQrUxK3QiQx8V\niNZHDHGUbimT2DEww4/+l2sdHfnGBchJBJSOsHU001fVPFSM0AxjXKt/DSmR\nPi2NZr/P4GGVO/EOvFNUzlGnO7YVMpb+eYrk80Zi2TK6gXbWG4mBJ3Xq+DGW\n2x7Uozh4lV/IKAcPH01jPTLG/5PabTNW6AsSA620G9pkIl03bX+TwSGwdog0\nWie9u4MEtfLsMWU3xUWnd12rTCD9LdCu6uYP8lMsg47y/OMyBsfeA/A+LQty\nlIVh+FiNPNXAPYxbY+b/B9O1/RKBnn0d3qA6xUzBU4xdAH8UdW5vBKi3rmtS\nNIIg18NoGpRSAnq7bd1+bWrD8hjdRJ+sq1SQ19iZW8YJVWPbdWrtNqGj4Ijo\nMXFWpeSOOPY1wUCiO2zVF1Teack0GOSYJzoFTnqCmMZV19+zDSCsYUx6oUSK\nHacxjx/X06ZEc9sX1WqMVA/227cOSpbkjMTsQ3O7YvoY7K+3xlSl3f0xE886\nxV0b\r\n=tQbh\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_23.5.0_1533909110418_0.5619971960173185"},"_hasShrinkwrap":false},"23.6.0":{"name":"jest-each","version":"23.6.0","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","pretty-format":"^23.6.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"jest-each@23.6.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"dist":{"integrity":"sha512-x7V6M/WGJo6/kLoissORuvLIeAoyo2YqLOoCDkohgJ4XOXSqOtyvr8FbInlAWS77ojBsZrafbozWoKVRdtxFCg==","shasum":"ba0c3a82a8054387016139c733a05242d3d71575","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-23.6.0.tgz","fileCount":4,"unpackedSize":20878,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJblmbUCRA9TVsSAnZWagAAsKsP/0N5NhHv07Xu0Ti6IPqR\n5gfvTaD/+RxgQQx5PmzCiVsVP/OqvJiFdlYV7bwLLwdsqT/DfJ+kciWRRVaj\nAmF3O/Y0pgkxeBSgbyN2hEPwPpGTRa2i8KItOfQefOIDXAL6gM5QrhTaoDbv\nXI2XWvvYd9Yj9XWB+mLp696DgEaZ4Dx7tbq3ADGtimWOt1kUsQNYSKdCPQZj\njqqESxj8m+A2BASOnpZFm7nvJzTeu3uPgpWzTfKyi9qrwmaJ07ONtdV7REYb\nzCM8yZ4vovdPgvqoSS+OWx/ShM1SmTA7p4GCk3JPKHhhOVONG0JOCwHT5Y2Z\nMkQLUOvBuae/2id40aYZTvkNgx1EO5psRLROP2GpqM/OwhHG995wMgMSoSb6\nIz2duZCBRkpRny1uOGb2HD2+fIxMq/9Z1Tf4J/5wuxdAto8184jW0wS9SI41\n0InyyGrlpob/v9ijUPkRcv8DG3Im5Co10LU5+0BnqVfjE6BqIo+uTK+7dFNB\n1BksdzTEJjPfg4fXQz05rvrYD4pIZbfvXvKTPI5kZ9b73Oy652LCf8LQkXoh\niRSY4PPSFP/Qz5X0R96r2j0TqnKTTz+Q2P8exFglMhQv619AmbfY8IhEtYF4\nHIjQH4yGFKnhD/BT9eCQ4p5e+CGowWyK38HAzB81WUlDPwx94BdORazkH/G5\ntPFH\r\n=GWho\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_23.6.0_1536583380046_0.7077175847113457"},"_hasShrinkwrap":false},"24.0.0-alpha.0":{"name":"jest-each","version":"24.0.0-alpha.0","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","jest-util":"^24.0.0-alpha.0","pretty-format":"^24.0.0-alpha.0"},"gitHead":"22f67d49ffcce7a5b6d6891438b837b3b26ba9db","readme":"<div align=\"center\">\n  <h1>jest-each</h1>\n  Jest Parameterised Testing\n</div>\n\n<hr />\n\n[![version](https://img.shields.io/npm/v/jest-each.svg?style=flat-square)](https://www.npmjs.com/package/jest-each) [![downloads](https://img.shields.io/npm/dm/jest-each.svg?style=flat-square)](http://npm-stat.com/charts.html?package=jest-each&from=2017-03-21) [![MIT License](https://img.shields.io/npm/l/jest-each.svg?style=flat-square)](https://github.com/facebook/jest/blob/master/LICENSE)\n\nA parameterised testing library for [Jest](https://jestjs.io/) inspired by [mocha-each](https://github.com/ryym/mocha-each).\n\njest-each allows you to provide multiple arguments to your `test`/`describe` which results in the test/suite being run once per row of parameters.\n\n## Features\n\n- `.test` to runs multiple tests with parameterised data\n  - Also under the alias: `.it`\n- `.test.only` to only run the parameterised tests\n  - Also under the aliases: `.it.only` or `.fit`\n- `.test.skip` to skip the parameterised tests\n  - Also under the aliases: `.it.skip` or `.xit` or `.xtest`\n- `.describe` to runs test suites with parameterised data\n- `.describe.only` to only run the parameterised suite of tests\n  - Also under the aliases: `.fdescribe`\n- `.describe.skip` to skip the parameterised suite of tests\n  - Also under the aliases: `.xdescribe`\n- Asynchronous tests with `done`\n- Unique test titles with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n  - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n  - `%s`- String.\n  - `%d`- Number.\n  - `%i` - Integer.\n  - `%f` - Floating point value.\n  - `%j` - JSON.\n  - `%o` - Object.\n  - `%#` - Index of the test case.\n  - `%%` - single percent sign ('%'). This does not consume an argument.\n- 🖖 Spock like data tables with [Tagged Template Literals](#tagged-template-literal-of-rows)\n\n---\n\n- [Demo](#demo)\n- [Installation](#installation)\n- [Importing](#importing)\n- APIs\n  - [Array of Rows](#array-of-rows)\n    - [Usage](#usage)\n  - [Tagged Template Literal of rows](#tagged-template-literal-of-rows)\n    - [Usage](#usage-1)\n\n## Demo\n\n#### Tests without jest-each\n\n![Current jest tests](assets/default-demo.gif)\n\n#### Tests can be re-written with jest-each to:\n\n**`.test`**\n\n![Current jest tests](assets/test-demo.gif)\n\n**`.test` with Tagged Template Literals**\n\n![Current jest tests](assets/tagged-template-literal.gif)\n\n**`.describe`**\n\n![Current jest tests](assets/describe-demo.gif)\n\n## Installation\n\n`npm i --save-dev jest-each`\n\n`yarn add -D jest-each`\n\n## Importing\n\njest-each is a default export so it can be imported with whatever name you like.\n\n```js\n// es6\nimport each from 'jest-each';\n```\n\n```js\n// es5\nconst each = require('jest-each');\n```\n\n## Array of rows\n\n### API\n\n#### `each([parameters]).test(name, testFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `testFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.test`:\n\n- name: `String` the title of the `test`.\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each([parameters]).describe(name, suiteFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `suiteFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.describe`:\n\n- name: `String` the title of the `describe`\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test.only(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach([[1, 1, 2][(1, 2, 3)], [2, 1, 3]]).test.skip(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach([['hello'], ['mr'], ['spy']]).test(\n  'gives 007 secret message: %s',\n  (str, done) => {\n    const asynchronousSpy = message => {\n      expect(message).toBe(str);\n      done();\n    };\n    callSomeAsynchronousFunction(asynchronousSpy)(str);\n  },\n);\n```\n\n#### `.describe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n\n    test('does not mutate first arg', () => {\n      a + b;\n      expect(a).toBe(a);\n    });\n\n    test('does not mutate second arg', () => {\n      a + b;\n      expect(b).toBe(b);\n    });\n  },\n);\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.only(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.skip(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n---\n\n## Tagged Template Literal of rows\n\n### API\n\n#### `each[tagged template].test(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.test`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each[tagged template].describe(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.describe`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.only('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.skip('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach`\n  str\n  ${'hello'}\n  ${'mr'}\n  ${'spy'}\n`.test('gives 007 secret message: $str', ({str}, done) => {\n  const asynchronousSpy = message => {\n    expect(message).toBe(str);\n    done();\n  };\n  callSomeAsynchronousFunction(asynchronousSpy)(str);\n});\n```\n\n#### `.describe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.only('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.skip('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n## License\n\nMIT\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"jest-each@24.0.0-alpha.0","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"dist":{"integrity":"sha512-bP2kUgnfIk9wiIfTlbjD4MoeEjYPMfB5QM/4EyxTXJhM3/q2jNmKiJDgEGORst6mxOnoAhuh3vT9SkBaBepkkA==","shasum":"8731194f3d9f06537857cadeaeac1706199a477e","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-24.0.0-alpha.0.tgz","fileCount":5,"unpackedSize":23604,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbycpSCRA9TVsSAnZWagAAv2YP/jbdYhSGeCGdYUdyPHjP\nklpOh7/VbXB0Hv5yauigHhdUGJsYNVu0qfdxC0hfLwS3RsgQWQKETlbcS9uP\nfs74gHGJkVIivf2SMSob8JSbyuHVAFXGwSD/d3GmBAPoZCMKglomiebs+1qB\nLI21qeBBLcHDqlL7Rj0HdCozow4pbjQ7WaDklweq06dgIBs+Q8xc6SYCjK95\nJmYzXSu2oAVf1hllISLzpUpKw2hk/dM6CQMUMys8YX3j1nrtXccdXgfKtuVG\nCYggfc1nkG5+fH26tJQ9mV5DiVAh2xShvuFDfrDBYI70WF5FB5QNqyTrWGz/\n//Tp+L1y/YezX6PEbhkWhU4N1029yckFhtEAhI7LxKB2QL3Dw9Ibp34fqqu6\n9ulvJZ/jwfPSAwXlBhTlPjs+S4Pzlzpagk4ZykeiQ6hAUfL/7mvcefguivDf\ngNdvLle4YarDhUAfGl/KZLB93ZIjxshKoXHb9swc0ytyBhbK3KMjFAwVm/+s\nLIS/4RsVp5kOVZmbVBSZagH0b3weq67YD/4PuFx0kOtDm30frmvCi/NKcYe6\nDhBaYBeg98N4sw/aSXXzbApPyxKLDjwVyGMulDX9WEtK0gXNZcIMo+9lz53x\nIXesJRgF+0LCTXDFVKiFmLf7jNCpMHWGNbKKj9ENrrwDo1VFTPz+D/CzR7wg\nDiAd\r\n=BGh8\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_24.0.0-alpha.0_1539951185187_0.9938100115960502"},"_hasShrinkwrap":false},"24.0.0-alpha.1":{"name":"jest-each","version":"24.0.0-alpha.1","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","jest-util":"^24.0.0-alpha.1","pretty-format":"^24.0.0-alpha.1"},"gitHead":"4954f46708415174c48a58f296a605fbe1244a31","readme":"<div align=\"center\">\n  <h1>jest-each</h1>\n  Jest Parameterised Testing\n</div>\n\n<hr />\n\n[![version](https://img.shields.io/npm/v/jest-each.svg?style=flat-square)](https://www.npmjs.com/package/jest-each) [![downloads](https://img.shields.io/npm/dm/jest-each.svg?style=flat-square)](http://npm-stat.com/charts.html?package=jest-each&from=2017-03-21) [![MIT License](https://img.shields.io/npm/l/jest-each.svg?style=flat-square)](https://github.com/facebook/jest/blob/master/LICENSE)\n\nA parameterised testing library for [Jest](https://jestjs.io/) inspired by [mocha-each](https://github.com/ryym/mocha-each).\n\njest-each allows you to provide multiple arguments to your `test`/`describe` which results in the test/suite being run once per row of parameters.\n\n## Features\n\n- `.test` to runs multiple tests with parameterised data\n  - Also under the alias: `.it`\n- `.test.only` to only run the parameterised tests\n  - Also under the aliases: `.it.only` or `.fit`\n- `.test.skip` to skip the parameterised tests\n  - Also under the aliases: `.it.skip` or `.xit` or `.xtest`\n- `.describe` to runs test suites with parameterised data\n- `.describe.only` to only run the parameterised suite of tests\n  - Also under the aliases: `.fdescribe`\n- `.describe.skip` to skip the parameterised suite of tests\n  - Also under the aliases: `.xdescribe`\n- Asynchronous tests with `done`\n- Unique test titles with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n  - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n  - `%s`- String.\n  - `%d`- Number.\n  - `%i` - Integer.\n  - `%f` - Floating point value.\n  - `%j` - JSON.\n  - `%o` - Object.\n  - `%#` - Index of the test case.\n  - `%%` - single percent sign ('%'). This does not consume an argument.\n- 🖖 Spock like data tables with [Tagged Template Literals](#tagged-template-literal-of-rows)\n\n---\n\n- [Demo](#demo)\n- [Installation](#installation)\n- [Importing](#importing)\n- APIs\n  - [Array of Rows](#array-of-rows)\n    - [Usage](#usage)\n  - [Tagged Template Literal of rows](#tagged-template-literal-of-rows)\n    - [Usage](#usage-1)\n\n## Demo\n\n#### Tests without jest-each\n\n![Current jest tests](assets/default-demo.gif)\n\n#### Tests can be re-written with jest-each to:\n\n**`.test`**\n\n![Current jest tests](assets/test-demo.gif)\n\n**`.test` with Tagged Template Literals**\n\n![Current jest tests](assets/tagged-template-literal.gif)\n\n**`.describe`**\n\n![Current jest tests](assets/describe-demo.gif)\n\n## Installation\n\n`npm i --save-dev jest-each`\n\n`yarn add -D jest-each`\n\n## Importing\n\njest-each is a default export so it can be imported with whatever name you like.\n\n```js\n// es6\nimport each from 'jest-each';\n```\n\n```js\n// es5\nconst each = require('jest-each');\n```\n\n## Array of rows\n\n### API\n\n#### `each([parameters]).test(name, testFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `testFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.test`:\n\n- name: `String` the title of the `test`.\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each([parameters]).describe(name, suiteFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `suiteFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.describe`:\n\n- name: `String` the title of the `describe`\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test.only(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach([[1, 1, 2][(1, 2, 3)], [2, 1, 3]]).test.skip(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach([['hello'], ['mr'], ['spy']]).test(\n  'gives 007 secret message: %s',\n  (str, done) => {\n    const asynchronousSpy = message => {\n      expect(message).toBe(str);\n      done();\n    };\n    callSomeAsynchronousFunction(asynchronousSpy)(str);\n  },\n);\n```\n\n#### `.describe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n\n    test('does not mutate first arg', () => {\n      a + b;\n      expect(a).toBe(a);\n    });\n\n    test('does not mutate second arg', () => {\n      a + b;\n      expect(b).toBe(b);\n    });\n  },\n);\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.only(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.skip(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n---\n\n## Tagged Template Literal of rows\n\n### API\n\n#### `each[tagged template].test(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.test`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each[tagged template].describe(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.describe`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.only('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.skip('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach`\n  str\n  ${'hello'}\n  ${'mr'}\n  ${'spy'}\n`.test('gives 007 secret message: $str', ({str}, done) => {\n  const asynchronousSpy = message => {\n    expect(message).toBe(str);\n    done();\n  };\n  callSomeAsynchronousFunction(asynchronousSpy)(str);\n});\n```\n\n#### `.describe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.only('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.skip('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n## License\n\nMIT\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"jest-each@24.0.0-alpha.1","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"dist":{"integrity":"sha512-U4KQT6q6eaPqWLJ9Lnc+8J1OaQvjNACQDCogQyeTSJUVFdcy0lbbGh32GTYwu9tkUr2K8F9jjsdb1swWPrRO2Q==","shasum":"ba175293c8193b958390b504d550acc540013e0f","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-24.0.0-alpha.1.tgz","fileCount":5,"unpackedSize":23604,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbze53CRA9TVsSAnZWagAAhHAP/ApCfAY25S3FVdmj9dL3\nT+BUhW/kdRcIuaS8XtMVdP0DCpAvWXBEiT0sbiBoolbj9WVMFzYPOjlrysUT\n6oJRHhtsxvSQurZ60MHXoEqdYHDkjB0P+GAkE+w6h654jFiAGrlaRicpOJ27\nh0SdGQ/SDXi+OTPc3JifYUWIZyQPPDedaAfY6JucAYU85tB3+saOHh8HzM73\nwxCpvTeYCwzKIGYPoNQ54FCOua52abFQThY+ntRUYDwQIcCeISx8eAz8ehk2\nPEojnA/Yw7Fwxlti0feg5QZAG6vv2SCo69bKqmBvGdSIeQyKNqgM/DGSJZ02\nuu34M2EETQBOiZ6T76Ufvc7iYKO+XXwg8eVMjtOy9pCiZKrWdkILxLHljPyJ\nHIM1ylNAnk7RcfktPcz1DSE3TU5HET3di5x+f8xeyFDIp2rtqq18h8m10t9V\nAUEIsoHPd6pn1MO792DCVmgUKI7TeP02K5/rjoMUzuggAyQmptOzscyZWbNo\nvZn9iHHIY3IfuCR/Z8aBQI/9n6ar4V664eTOmcXpdhg/lHIoHo6xPU9x117t\nPHQhrZlPYDSQjv7rq64NfcPcciI/3i1tNHFJxqUHpbhGOPrBPqn9epYGCEBR\nKMfEQRgrAYRTXjhiXThT5PXoPzjeg0H1fth1J2GGyAo8vcBM0MEwNQwisdcN\n94CD\r\n=kxCr\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mattphillips","email":"matt@mattphillips.io"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_24.0.0-alpha.1_1540222582855_0.7712390661022286"},"_hasShrinkwrap":false},"24.0.0-alpha.2":{"name":"jest-each","version":"24.0.0-alpha.2","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","jest-util":"^24.0.0-alpha.2","pretty-format":"^24.0.0-alpha.2"},"engines":{"node":">= 6"},"gitHead":"c5e36835cff4b241327db9cf58c8f6f7227ed1f7","bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"jest-each@24.0.0-alpha.2","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"dist":{"integrity":"sha512-E/FWCg/z+XGvFTg7RuJkQcHO04I2aF8EjukEzNuj4C5t2fvP2LH73c4iosNPf+bMLWMBEu2MNTVyhpHXPssymA==","shasum":"88b66ecbb605fc5b851a3bb6009d160e6ce223f0","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-24.0.0-alpha.2.tgz","fileCount":6,"unpackedSize":52126,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb0aAYCRA9TVsSAnZWagAAjUIP/jCAkvDuoi6cFhKwjXvE\nYimZjdYOP6cRzjowcGpa7CMF+MA4KpEliBvQKt2PotBEUQD0twm55On+605C\n8m8npn+PiPofdyGsyzxhQjGwSN97O60KtPXqNH7zVhfSxkgRPsczPGRcZbo5\nA3mN1viNncTEV6oTMtC7gmakVSR+A3uXhCx8zRBIhVDh9+1rJAtdJ4nM4V+r\nviDfVOKga9gR72OJ+8GVvpHQnI+cE/YfeJuaXsu2ijOye0khY1b6qU3q1sOt\n44jQbwdcpeMn25Xvs4lDGFJ5ff5YfOHn1VsQnBHza9suIRHb0+z75UjyDUTe\nXBd7M8XSA7VZdCpLAfMlkGujmofcPIvXL9Xf4fzKXXzl1HeM8qiJnO7SWX8q\nQZyUcyozczGIxEVENtCCLO5qnmYh87V45Y7de6sv3bfpf582X20R9Dy0htSE\nb4mZCGqzOz4uxoubKE6TpQLBVY8GPrtcYG3Q6wYleptHAInwjaI1HPiuMxsV\nKbhWmBHoV+oAmknz1EXVskGqzWQVYk/uzrDWsvCuH2rAMrzyKOWXiS8KmUc0\n5630s923D8xIgyYSJfAL2PGn9f98hG4fbAmH+o8YE8aEsKiVPHbepLly1Nw8\ndRdeWNT6mQmI9AoLU8VIii297WZI9V7I9SMhWLc/k0lLKg2aJ+KepzZtHCGT\nSgbB\r\n=D2NZ\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"matt@mattphillips.io","name":"mattphillips"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_24.0.0-alpha.2_1540464663802_0.002890415549660519"},"_hasShrinkwrap":false},"24.0.0-alpha.3":{"name":"jest-each","version":"24.0.0-alpha.3","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","jest-util":"^24.0.0-alpha.3","pretty-format":"^23.6.0"},"engines":{"node":">= 6"},"gitHead":"e41f0bb257c6652c3100b97a1087f9f812fbea0d","readme":"<div align=\"center\">\n  <h1>jest-each</h1>\n  Jest Parameterised Testing\n</div>\n\n<hr />\n\n[![version](https://img.shields.io/npm/v/jest-each.svg?style=flat-square)](https://www.npmjs.com/package/jest-each) [![downloads](https://img.shields.io/npm/dm/jest-each.svg?style=flat-square)](http://npm-stat.com/charts.html?package=jest-each&from=2017-03-21) [![MIT License](https://img.shields.io/npm/l/jest-each.svg?style=flat-square)](https://github.com/facebook/jest/blob/master/LICENSE)\n\nA parameterised testing library for [Jest](https://jestjs.io/) inspired by [mocha-each](https://github.com/ryym/mocha-each).\n\njest-each allows you to provide multiple arguments to your `test`/`describe` which results in the test/suite being run once per row of parameters.\n\n## Features\n\n- `.test` to runs multiple tests with parameterised data\n  - Also under the alias: `.it`\n- `.test.only` to only run the parameterised tests\n  - Also under the aliases: `.it.only` or `.fit`\n- `.test.skip` to skip the parameterised tests\n  - Also under the aliases: `.it.skip` or `.xit` or `.xtest`\n- `.describe` to runs test suites with parameterised data\n- `.describe.only` to only run the parameterised suite of tests\n  - Also under the aliases: `.fdescribe`\n- `.describe.skip` to skip the parameterised suite of tests\n  - Also under the aliases: `.xdescribe`\n- Asynchronous tests with `done`\n- Unique test titles with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n  - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n  - `%s`- String.\n  - `%d`- Number.\n  - `%i` - Integer.\n  - `%f` - Floating point value.\n  - `%j` - JSON.\n  - `%o` - Object.\n  - `%#` - Index of the test case.\n  - `%%` - single percent sign ('%'). This does not consume an argument.\n- 🖖 Spock like data tables with [Tagged Template Literals](#tagged-template-literal-of-rows)\n\n---\n\n- [Demo](#demo)\n- [Installation](#installation)\n- [Importing](#importing)\n- APIs\n  - [Array of Rows](#array-of-rows)\n    - [Usage](#usage)\n  - [Tagged Template Literal of rows](#tagged-template-literal-of-rows)\n    - [Usage](#usage-1)\n\n## Demo\n\n#### Tests without jest-each\n\n![Current jest tests](assets/default-demo.gif)\n\n#### Tests can be re-written with jest-each to:\n\n**`.test`**\n\n![Current jest tests](assets/test-demo.gif)\n\n**`.test` with Tagged Template Literals**\n\n![Current jest tests](assets/tagged-template-literal.gif)\n\n**`.describe`**\n\n![Current jest tests](assets/describe-demo.gif)\n\n## Installation\n\n`npm i --save-dev jest-each`\n\n`yarn add -D jest-each`\n\n## Importing\n\njest-each is a default export so it can be imported with whatever name you like.\n\n```js\n// es6\nimport each from 'jest-each';\n```\n\n```js\n// es5\nconst each = require('jest-each');\n```\n\n## Array of rows\n\n### API\n\n#### `each([parameters]).test(name, testFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `testFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.test`:\n\n- name: `String` the title of the `test`.\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each([parameters]).describe(name, suiteFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `suiteFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.describe`:\n\n- name: `String` the title of the `describe`\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test.only(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach([[1, 1, 2][(1, 2, 3)], [2, 1, 3]]).test.skip(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach([['hello'], ['mr'], ['spy']]).test(\n  'gives 007 secret message: %s',\n  (str, done) => {\n    const asynchronousSpy = message => {\n      expect(message).toBe(str);\n      done();\n    };\n    callSomeAsynchronousFunction(asynchronousSpy)(str);\n  },\n);\n```\n\n#### `.describe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n\n    test('does not mutate first arg', () => {\n      a + b;\n      expect(a).toBe(a);\n    });\n\n    test('does not mutate second arg', () => {\n      a + b;\n      expect(b).toBe(b);\n    });\n  },\n);\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.only(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.skip(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n---\n\n## Tagged Template Literal of rows\n\n### API\n\n#### `each[tagged template].test(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.test`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each[tagged template].describe(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.describe`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.only('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.skip('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach`\n  str\n  ${'hello'}\n  ${'mr'}\n  ${'spy'}\n`.test('gives 007 secret message: $str', ({str}, done) => {\n  const asynchronousSpy = message => {\n    expect(message).toBe(str);\n    done();\n  };\n  callSomeAsynchronousFunction(asynchronousSpy)(str);\n});\n```\n\n#### `.describe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.only('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.skip('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n## License\n\nMIT\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"jest-each@24.0.0-alpha.3","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"dist":{"integrity":"sha512-UGQis6TYgUaB8RRqXBMHWR+WylJ35X4wVVlaO4jD31nRvskRMqNTzJ3j+e4xf99vBqS+x4YbsEPgKc8aMe2dcg==","shasum":"e62b5c77961baf875921684d25912fd3b1661e49","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-24.0.0-alpha.3.tgz","fileCount":5,"unpackedSize":23635,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb0z4ACRA9TVsSAnZWagAA5mEQAKOApN+grTMXFelpVnEh\niEXwoEwZ3sIZ/zIwv5Ej9GWPIZGCkAv193ofS3pKk+9cw9oBAQLTM3dn+n9v\n0bAJuDHPY3JKqh3UKeVUCN/6YSpVbl3aaxzIbrT8Go8GtnIjxf24b3qqZYW/\n+wuE+QAOdnylujOPY3xuja2WBLlh8EiVdTQgWaFJZl4sq+NoiEfTBNptsTP6\nw+jndad90tmefVREWMmpSDlHymo/UypEftASzjGdG5dlRU7AxxHWgJcfklvq\n8unzp6n1x0WLtfQZkMoppK6UZbBrNvryAMUlZp0KuLfkzrqB44MfCBb8dqPL\nDhA1US3pE3hvU2LM7QwxCu1NND2xBUpxy3pxZqgnpq+N1X/P7niwt9UyS1PV\nD1arnDl4qRqaMmmheGtvXyyr08mSYQnuuDbG8JeIT9Ra3+83WYdxXWEF/nwb\nlfmSF0urOjgZXLqBVEnps8tZ83TRE08PXQFsNGjP5TMJVKF4E1cuglVhhYBl\nJRFYRPTsYTOCFK8MUNkiwyVpC0vyod1RqWCpz+JnWWt927WnH/ga3Reyvqf9\nZkzzNw8MEleR21CYv0Mya8nD1m3qZxNZJBAbYWnsYlnkZkLnw6MfbNfwezpw\na+lQgKmLu8YWc/NnB64fqNf2+3FU590YI8vkSCVpeVMiXyA8AYEj1WnxHxbx\nsGGT\r\n=u2N9\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"matt@mattphillips.io","name":"mattphillips"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_24.0.0-alpha.3_1540570623900_0.7465656554064326"},"_hasShrinkwrap":false},"24.0.0-alpha.4":{"name":"jest-each","version":"24.0.0-alpha.4","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","jest-util":"^24.0.0-alpha.4","pretty-format":"^24.0.0-alpha.4"},"engines":{"node":">= 6"},"gitHead":"e41f0bb257c6652c3100b97a1087f9f812fbea0d","readme":"<div align=\"center\">\n  <h1>jest-each</h1>\n  Jest Parameterised Testing\n</div>\n\n<hr />\n\n[![version](https://img.shields.io/npm/v/jest-each.svg?style=flat-square)](https://www.npmjs.com/package/jest-each) [![downloads](https://img.shields.io/npm/dm/jest-each.svg?style=flat-square)](http://npm-stat.com/charts.html?package=jest-each&from=2017-03-21) [![MIT License](https://img.shields.io/npm/l/jest-each.svg?style=flat-square)](https://github.com/facebook/jest/blob/master/LICENSE)\n\nA parameterised testing library for [Jest](https://jestjs.io/) inspired by [mocha-each](https://github.com/ryym/mocha-each).\n\njest-each allows you to provide multiple arguments to your `test`/`describe` which results in the test/suite being run once per row of parameters.\n\n## Features\n\n- `.test` to runs multiple tests with parameterised data\n  - Also under the alias: `.it`\n- `.test.only` to only run the parameterised tests\n  - Also under the aliases: `.it.only` or `.fit`\n- `.test.skip` to skip the parameterised tests\n  - Also under the aliases: `.it.skip` or `.xit` or `.xtest`\n- `.describe` to runs test suites with parameterised data\n- `.describe.only` to only run the parameterised suite of tests\n  - Also under the aliases: `.fdescribe`\n- `.describe.skip` to skip the parameterised suite of tests\n  - Also under the aliases: `.xdescribe`\n- Asynchronous tests with `done`\n- Unique test titles with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n  - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n  - `%s`- String.\n  - `%d`- Number.\n  - `%i` - Integer.\n  - `%f` - Floating point value.\n  - `%j` - JSON.\n  - `%o` - Object.\n  - `%#` - Index of the test case.\n  - `%%` - single percent sign ('%'). This does not consume an argument.\n- 🖖 Spock like data tables with [Tagged Template Literals](#tagged-template-literal-of-rows)\n\n---\n\n- [Demo](#demo)\n- [Installation](#installation)\n- [Importing](#importing)\n- APIs\n  - [Array of Rows](#array-of-rows)\n    - [Usage](#usage)\n  - [Tagged Template Literal of rows](#tagged-template-literal-of-rows)\n    - [Usage](#usage-1)\n\n## Demo\n\n#### Tests without jest-each\n\n![Current jest tests](assets/default-demo.gif)\n\n#### Tests can be re-written with jest-each to:\n\n**`.test`**\n\n![Current jest tests](assets/test-demo.gif)\n\n**`.test` with Tagged Template Literals**\n\n![Current jest tests](assets/tagged-template-literal.gif)\n\n**`.describe`**\n\n![Current jest tests](assets/describe-demo.gif)\n\n## Installation\n\n`npm i --save-dev jest-each`\n\n`yarn add -D jest-each`\n\n## Importing\n\njest-each is a default export so it can be imported with whatever name you like.\n\n```js\n// es6\nimport each from 'jest-each';\n```\n\n```js\n// es5\nconst each = require('jest-each');\n```\n\n## Array of rows\n\n### API\n\n#### `each([parameters]).test(name, testFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `testFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.test`:\n\n- name: `String` the title of the `test`.\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each([parameters]).describe(name, suiteFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `suiteFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.describe`:\n\n- name: `String` the title of the `describe`\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test.only(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach([[1, 1, 2][(1, 2, 3)], [2, 1, 3]]).test.skip(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach([['hello'], ['mr'], ['spy']]).test(\n  'gives 007 secret message: %s',\n  (str, done) => {\n    const asynchronousSpy = message => {\n      expect(message).toBe(str);\n      done();\n    };\n    callSomeAsynchronousFunction(asynchronousSpy)(str);\n  },\n);\n```\n\n#### `.describe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n\n    test('does not mutate first arg', () => {\n      a + b;\n      expect(a).toBe(a);\n    });\n\n    test('does not mutate second arg', () => {\n      a + b;\n      expect(b).toBe(b);\n    });\n  },\n);\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.only(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.skip(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n---\n\n## Tagged Template Literal of rows\n\n### API\n\n#### `each[tagged template].test(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.test`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each[tagged template].describe(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.describe`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.only('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.skip('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach`\n  str\n  ${'hello'}\n  ${'mr'}\n  ${'spy'}\n`.test('gives 007 secret message: $str', ({str}, done) => {\n  const asynchronousSpy = message => {\n    expect(message).toBe(str);\n    done();\n  };\n  callSomeAsynchronousFunction(asynchronousSpy)(str);\n});\n```\n\n#### `.describe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.only('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.skip('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n## License\n\nMIT\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"jest-each@24.0.0-alpha.4","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"dist":{"integrity":"sha512-tnD25TU9HmZG/+5zUnWK8nITVqqBOl037oDroHKYrgPdyJez4WbZuwkZDVotsz3rb58Y/aSaCIeRXMUX6+JIDg==","shasum":"24e0402e631df539e93cdfbfd0641ef39b598124","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-24.0.0-alpha.4.tgz","fileCount":5,"unpackedSize":23643,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb00HeCRA9TVsSAnZWagAAngYP/ApuBq6ztnIjNjT7Z2tj\ni34N0Di1C91syepbv544O6oeS9i2rQM62Q1kyszFvej+kJpq83vnR77goCju\nhVzHtY7XQIurMfzgZo6vN35mXgTKycBww+78ytRpdKVwT2q7R+FEEir9ufZC\njk18MpBI6clXwMO57pmNEhVYLdGePLjYOwRki0Xd6Wj1r2wMX4X4GYpDNUj+\nyv+Y1ZAsnRI4Vc3eUOKgi0+kvNqIGIrqK1cB+3fOC29Lf2yRNNSmHzm+VMpm\nE3R/ipbgxVE0pPkUyK8WoHyhypCj60eYL8hWkMC1inIhyj6jaLitHW9JiBCq\n4iG9A74IC4+FucqHrR4R9YEU6sMVGeTR0Qysb5bBpV6a/FzYaHl26ZvkhiX4\n0vCbDwXKHq+KwQGzniYaIxd8/mLLxRyQxipBbK0dX6+47HuhvKJXsZNGxMco\nbCSGlMUuF4ijBx4boW0/5f2Ew7SAsUWTZoPOvXwafatGqNdQmjiWQyZ/gxQC\nW5CNJzESDTPbM8U4WRlXZnz97uBHm0vMzS50lLIZ5gNFE7PsA8Sex729pglb\n48VxuEQADCyVxGM82ogpJd+kL98nlpqEBZxiGmkqnaPlx5vwDU13BF4ovtV5\ntpxi5iF69wKzpoQDhZC5Rxe59ewg87sJ6dzrsZOLmuICd9kwSL7SALiwGm6A\nZx0c\r\n=JVe5\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"matt@mattphillips.io","name":"mattphillips"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_24.0.0-alpha.4_1540571613842_0.9961635909088586"},"_hasShrinkwrap":false},"24.0.0-alpha.5":{"name":"jest-each","version":"24.0.0-alpha.5","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","jest-util":"^24.0.0-alpha.5","pretty-format":"^24.0.0-alpha.5"},"engines":{"node":">= 6"},"gitHead":"2c18a53e8ff2437bba5fcb8076b754ac5f79f9f8","readme":"<div align=\"center\">\n  <h1>jest-each</h1>\n  Jest Parameterised Testing\n</div>\n\n<hr />\n\n[![version](https://img.shields.io/npm/v/jest-each.svg?style=flat-square)](https://www.npmjs.com/package/jest-each) [![downloads](https://img.shields.io/npm/dm/jest-each.svg?style=flat-square)](http://npm-stat.com/charts.html?package=jest-each&from=2017-03-21) [![MIT License](https://img.shields.io/npm/l/jest-each.svg?style=flat-square)](https://github.com/facebook/jest/blob/master/LICENSE)\n\nA parameterised testing library for [Jest](https://jestjs.io/) inspired by [mocha-each](https://github.com/ryym/mocha-each).\n\njest-each allows you to provide multiple arguments to your `test`/`describe` which results in the test/suite being run once per row of parameters.\n\n## Features\n\n- `.test` to runs multiple tests with parameterised data\n  - Also under the alias: `.it`\n- `.test.only` to only run the parameterised tests\n  - Also under the aliases: `.it.only` or `.fit`\n- `.test.skip` to skip the parameterised tests\n  - Also under the aliases: `.it.skip` or `.xit` or `.xtest`\n- `.describe` to runs test suites with parameterised data\n- `.describe.only` to only run the parameterised suite of tests\n  - Also under the aliases: `.fdescribe`\n- `.describe.skip` to skip the parameterised suite of tests\n  - Also under the aliases: `.xdescribe`\n- Asynchronous tests with `done`\n- Unique test titles with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n  - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n  - `%s`- String.\n  - `%d`- Number.\n  - `%i` - Integer.\n  - `%f` - Floating point value.\n  - `%j` - JSON.\n  - `%o` - Object.\n  - `%#` - Index of the test case.\n  - `%%` - single percent sign ('%'). This does not consume an argument.\n- 🖖 Spock like data tables with [Tagged Template Literals](#tagged-template-literal-of-rows)\n\n---\n\n- [Demo](#demo)\n- [Installation](#installation)\n- [Importing](#importing)\n- APIs\n  - [Array of Rows](#array-of-rows)\n    - [Usage](#usage)\n  - [Tagged Template Literal of rows](#tagged-template-literal-of-rows)\n    - [Usage](#usage-1)\n\n## Demo\n\n#### Tests without jest-each\n\n![Current jest tests](assets/default-demo.gif)\n\n#### Tests can be re-written with jest-each to:\n\n**`.test`**\n\n![Current jest tests](assets/test-demo.gif)\n\n**`.test` with Tagged Template Literals**\n\n![Current jest tests](assets/tagged-template-literal.gif)\n\n**`.describe`**\n\n![Current jest tests](assets/describe-demo.gif)\n\n## Installation\n\n`npm i --save-dev jest-each`\n\n`yarn add -D jest-each`\n\n## Importing\n\njest-each is a default export so it can be imported with whatever name you like.\n\n```js\n// es6\nimport each from 'jest-each';\n```\n\n```js\n// es5\nconst each = require('jest-each');\n```\n\n## Array of rows\n\n### API\n\n#### `each([parameters]).test(name, testFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `testFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.test`:\n\n- name: `String` the title of the `test`.\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each([parameters]).describe(name, suiteFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `suiteFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.describe`:\n\n- name: `String` the title of the `describe`\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test.only(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach([[1, 1, 2][(1, 2, 3)], [2, 1, 3]]).test.skip(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach([['hello'], ['mr'], ['spy']]).test(\n  'gives 007 secret message: %s',\n  (str, done) => {\n    const asynchronousSpy = message => {\n      expect(message).toBe(str);\n      done();\n    };\n    callSomeAsynchronousFunction(asynchronousSpy)(str);\n  },\n);\n```\n\n#### `.describe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n\n    test('does not mutate first arg', () => {\n      a + b;\n      expect(a).toBe(a);\n    });\n\n    test('does not mutate second arg', () => {\n      a + b;\n      expect(b).toBe(b);\n    });\n  },\n);\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.only(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.skip(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n---\n\n## Tagged Template Literal of rows\n\n### API\n\n#### `each[tagged template].test(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.test`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each[tagged template].describe(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.describe`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.only('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.skip('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach`\n  str\n  ${'hello'}\n  ${'mr'}\n  ${'spy'}\n`.test('gives 007 secret message: $str', ({str}, done) => {\n  const asynchronousSpy = message => {\n    expect(message).toBe(str);\n    done();\n  };\n  callSomeAsynchronousFunction(asynchronousSpy)(str);\n});\n```\n\n#### `.describe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.only('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.skip('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n## License\n\nMIT\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"jest-each@24.0.0-alpha.5","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"dist":{"integrity":"sha512-AHj0UsBdYODq8mHxvu2D50R7JZMI/8iEMWiS8nUE8oi2kKG16ltIEvfjAHbF7YORXGqLc1sJ9VuZoE7zZ+2beA==","shasum":"fff7b343e1a1cf8b17c69e547e7e640fa1a0607b","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-24.0.0-alpha.5.tgz","fileCount":5,"unpackedSize":24869,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb5YfgCRA9TVsSAnZWagAAWAMP/3G4JXPPvcwUnoc4Eg7u\nDJMkaD28EWuibC5QVxMTqdWSQdDlPM9deO++PmKHPfMAQdPpoREqVmW4f9ZX\nhhrK2gj+o/v0LijHN3FUvsxACGG0gkpJL3PYnJOdefhrcs7xU9J70wa5AQrc\nUYwCTz8syZeTbeYWYnIYln9XRuMzYqh4a4fI9x5Tkp5UFsnIGiq92hRYXABv\nJidEkWk5pUwxZn8hcM+4O/S4mgVb1pJLsxaChRRhrsbhDHD89/7r8EiAZLV5\nDd5MQLJIkKuL7cir63WvwDH+ZkPUOcEd1EAIG78gSlydPPSI4YVO2JBLfXSu\nRTSxFFINzdClomqvMHRNoYtth3qE4tsT+NTy/+D6rTmnW10MIkWbschZiVYc\nWR/RyjM1MTYCRDeYTaUlCJ4RxoR3WDUwIMAaW88Xw83SVIxwmDk8cXsjyw9x\nQ4BDYJDWMjxLZvBBMdGX9pZ24nB0Pdx6+KgseeynR1Yj2/9baaWGWJZ4BekV\ne3laC8WpvilQIfL0GDiIBlUJ38cEmx9GtOzDhEFhc+xngi5l3dlbAZvSnAlt\nbkD4VbGHfIRWnWeRt/ULC4ESLJcZQIgil5DtixblGfmnTZH1NWZBn2yMQcIk\nahQJicQdkJpNAXrCEPICiZ58XxRyHW1KMRssb+sU3nCX1CzR9al5sQLMD2pe\n7u3G\r\n=xoDc\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"matt@mattphillips.io","name":"mattphillips"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_24.0.0-alpha.5_1541769184264_0.4080144554175553"},"_hasShrinkwrap":false},"24.0.0-alpha.6":{"name":"jest-each","version":"24.0.0-alpha.6","description":"Parameterised tests for Jest","main":"build/index.js","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"keywords":["jest","parameterised","test","each"],"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","dependencies":{"chalk":"^2.0.1","jest-util":"^24.0.0-alpha.6","pretty-format":"^24.0.0-alpha.6"},"engines":{"node":">= 6"},"gitHead":"49d08403a941e596eda1279c07a1eaf4d4a73dad","readme":"<div align=\"center\">\n  <h1>jest-each</h1>\n  Jest Parameterised Testing\n</div>\n\n<hr />\n\n[![version](https://img.shields.io/npm/v/jest-each.svg?style=flat-square)](https://www.npmjs.com/package/jest-each) [![downloads](https://img.shields.io/npm/dm/jest-each.svg?style=flat-square)](http://npm-stat.com/charts.html?package=jest-each&from=2017-03-21) [![MIT License](https://img.shields.io/npm/l/jest-each.svg?style=flat-square)](https://github.com/facebook/jest/blob/master/LICENSE)\n\nA parameterised testing library for [Jest](https://jestjs.io/) inspired by [mocha-each](https://github.com/ryym/mocha-each).\n\njest-each allows you to provide multiple arguments to your `test`/`describe` which results in the test/suite being run once per row of parameters.\n\n## Features\n\n- `.test` to runs multiple tests with parameterised data\n  - Also under the alias: `.it`\n- `.test.only` to only run the parameterised tests\n  - Also under the aliases: `.it.only` or `.fit`\n- `.test.skip` to skip the parameterised tests\n  - Also under the aliases: `.it.skip` or `.xit` or `.xtest`\n- `.describe` to runs test suites with parameterised data\n- `.describe.only` to only run the parameterised suite of tests\n  - Also under the aliases: `.fdescribe`\n- `.describe.skip` to skip the parameterised suite of tests\n  - Also under the aliases: `.xdescribe`\n- Asynchronous tests with `done`\n- Unique test titles with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n  - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n  - `%s`- String.\n  - `%d`- Number.\n  - `%i` - Integer.\n  - `%f` - Floating point value.\n  - `%j` - JSON.\n  - `%o` - Object.\n  - `%#` - Index of the test case.\n  - `%%` - single percent sign ('%'). This does not consume an argument.\n- 🖖 Spock like data tables with [Tagged Template Literals](#tagged-template-literal-of-rows)\n\n---\n\n- [Demo](#demo)\n- [Installation](#installation)\n- [Importing](#importing)\n- APIs\n  - [Array of Rows](#array-of-rows)\n    - [Usage](#usage)\n  - [Tagged Template Literal of rows](#tagged-template-literal-of-rows)\n    - [Usage](#usage-1)\n\n## Demo\n\n#### Tests without jest-each\n\n![Current jest tests](assets/default-demo.gif)\n\n#### Tests can be re-written with jest-each to:\n\n**`.test`**\n\n![Current jest tests](assets/test-demo.gif)\n\n**`.test` with Tagged Template Literals**\n\n![Current jest tests](assets/tagged-template-literal.gif)\n\n**`.describe`**\n\n![Current jest tests](assets/describe-demo.gif)\n\n## Installation\n\n`npm i --save-dev jest-each`\n\n`yarn add -D jest-each`\n\n## Importing\n\njest-each is a default export so it can be imported with whatever name you like.\n\n```js\n// es6\nimport each from 'jest-each';\n```\n\n```js\n// es5\nconst each = require('jest-each');\n```\n\n## Array of rows\n\n### API\n\n#### `each([parameters]).test(name, testFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `testFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.test`:\n\n- name: `String` the title of the `test`.\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each([parameters]).describe(name, suiteFn)`\n\n##### `each`:\n\n- parameters: `Array` of Arrays with the arguments that are passed into the `suiteFn` for each row\n  - _Note_ If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n\n##### `.describe`:\n\n- name: `String` the title of the `describe`\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).test.only(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach([[1, 1, 2][(1, 2, 3)], [2, 1, 3]]).test.skip(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach([['hello'], ['mr'], ['spy']]).test(\n  'gives 007 secret message: %s',\n  (str, done) => {\n    const asynchronousSpy = message => {\n      expect(message).toBe(str);\n      done();\n    };\n    callSomeAsynchronousFunction(asynchronousSpy)(str);\n  },\n);\n```\n\n#### `.describe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n\n    test('does not mutate first arg', () => {\n      a + b;\n      expect(a).toBe(a);\n    });\n\n    test('does not mutate second arg', () => {\n      a + b;\n      expect(b).toBe(b);\n    });\n  },\n);\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.only(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach([[1, 1, 2], [1, 2, 3], [2, 1, 3]]).describe.skip(\n  '.add(%d, %d)',\n  (a, b, expected) => {\n    test(`returns ${expected}`, () => {\n      expect(a + b).toBe(expected);\n    });\n  },\n);\n```\n\n---\n\n## Tagged Template Literal of rows\n\n### API\n\n#### `each[tagged template].test(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.test`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- testFn: `Function` the test logic, this is the function that will receive the parameters of each row as function arguments\n\n#### `each[tagged template].describe(name, suiteFn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n##### `each` takes a tagged template string with:\n\n- First row of variable name column headings seperated with `|`\n- One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\n##### `.describe`:\n\n- name: `String` the title of the `test`, use `$variable` in the name string to inject test values into the test title from the tagged template expressions\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- suiteFn: `Function` the suite of `test`/`it`s to be ran, this is the function that will receive the parameters in each row as function arguments\n\n### Usage\n\n#### `.test(name, fn)`\n\nAlias: `.it(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.only(name, fn)`\n\nAliases: `.it.only(name, fn)` or `.fit(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.only('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### `.test.skip(name, fn)`\n\nAliases: `.it.skip(name, fn)` or `.xit(name, fn)` or `.xtest(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.skip('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### Asynchronous `.test(name, fn(done))`\n\nAlias: `.it(name, fn(done))`\n\n```js\neach`\n  str\n  ${'hello'}\n  ${'mr'}\n  ${'spy'}\n`.test('gives 007 secret message: $str', ({str}, done) => {\n  const asynchronousSpy = message => {\n    expect(message).toBe(str);\n    done();\n  };\n  callSomeAsynchronousFunction(asynchronousSpy)(str);\n});\n```\n\n#### `.describe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n#### `.describe.only(name, fn)`\n\nAliases: `.fdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.only('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n#### `.describe.skip(name, fn)`\n\nAliases: `.xdescribe(name, fn)`\n\n```js\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.skip('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n## License\n\nMIT\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"jest-each@24.0.0-alpha.6","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"dist":{"integrity":"sha512-l9Dm0R6dKUT+4wRsQTAm52tAlcI0QQPOuLYouN997Ac/0t+dwPH9j/gMxpcSw6GHf3g208jZIPaA/fbR1ZMh9Q==","shasum":"9f73236c940ec82fca62992435c671cfa9a871eb","tarball":"https://registry.npmjs.org/jest-each/-/jest-each-24.0.0-alpha.6.tgz","fileCount":5,"unpackedSize":24869,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb5cjICRA9TVsSAnZWagAAARgP/1Le8qyjc1mkawi/RnVQ\nvLMdWrnaNcVCx4lRuaLDTbFk1znZewRYH2V91W1FWQSMMAFOFoEb+zTR+xj4\nmjFFr4DzX75GdR4CikrwL+fC8s3Ft5xdBK1Po0/oVviIc27vV+Wi3HBKUyK2\nzaNI6fuSUOjaxjZKjMa6lehj+xC5juNe5pWIf0rNBujuuqfrepFRI0Dt9GAc\n8UsMF0h7Q+DjddbPBTfMMoFnFV0mzXOjgpFFv+P9Nc7PTeNr4Wu27YYOR8Cc\nqazenXG5A0H6NJcyxxO3Dz1xRcBkRmgbj2R3Sm+nNQlVutNcQW/9aVcY5gYE\nGlNlAfZZEc3QQR2LT7lA0d2wqfwJHzrvP8590jzvCANUhSajk6MHRBK6ztIz\nuuuUq23rsMhEx2tesIKAHLY8n9GKc69H5szkdV7IVcP9XSmjoaP3NdTbx4od\n6rkxlkP9v3tjPhrcBr/LMU7RHcLpZVMWVwpYEUY91pVPQSQWEUQWgR159nTe\nubx9R4S8XdCkPcgI1fm3eMh7iXDjbxzwdAjx1GF04srG+hxRJNZKJQS4Mt0/\nMYKs+J/J7TDBtLgLI7CTvYlllZeemh+ZOemf6JhsvSzGmJVgVbs3y4FdWnAc\n+lm2O/l7nhV1tdmDgcY+jlShZJD6vjqY9Gb9hgkputuyDIiDuYLR8yNUPcFk\n85kJ\r\n=yyNO\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"matt@mattphillips.io","name":"mattphillips"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jest-each_24.0.0-alpha.6_1541785799669_0.7086987002657339"},"_hasShrinkwrap":false}},"readme":"","maintainers":[{"email":"matt@mattphillips.io","name":"mattphillips"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"time":{"modified":"2018-11-09T17:50:03.650Z","created":"2017-03-21T23:17:51.126Z","0.0.1":"2017-03-21T23:17:51.126Z","0.1.0":"2017-03-29T09:12:50.303Z","0.2.0":"2017-03-29T21:05:12.138Z","0.3.0":"2017-09-06T15:24:54.189Z","0.3.1":"2017-09-06T16:13:54.262Z","0.4.0":"2018-04-30T23:22:11.358Z","0.5.0":"2018-04-30T23:46:22.158Z","23.0.1":"2018-05-27T15:31:05.123Z","23.0.2":"2018-05-30T17:33:00.398Z","23.1.0":"2018-05-30T18:05:26.817Z","23.2.0":"2018-06-25T14:05:20.315Z","23.4.0":"2018-07-10T15:52:24.915Z","23.5.0":"2018-08-10T13:51:50.509Z","23.6.0":"2018-09-10T12:43:00.183Z","24.0.0-alpha.0":"2018-10-19T12:13:05.338Z","24.0.0-alpha.1":"2018-10-22T15:36:22.979Z","24.0.0-alpha.2":"2018-10-25T10:51:03.953Z","24.0.0-alpha.3":"2018-10-26T16:17:04.003Z","24.0.0-alpha.4":"2018-10-26T16:33:34.027Z","24.0.0-alpha.5":"2018-11-09T13:13:04.394Z","24.0.0-alpha.6":"2018-11-09T17:49:59.803Z"},"keywords":["jest","parameterised","test","each"],"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"author":{"name":"Matt Phillips","url":"mattphillips"},"license":"MIT","readmeFilename":"","homepage":"https://github.com/facebook/jest#readme","bugs":{"url":"https://github.com/facebook/jest/issues"},"_etag":"W/\"4754fec6d0982fd941f40c9976d5a955\"","_lastModified":"Fri, 09 Nov 2018 17:50:04 GMT"}