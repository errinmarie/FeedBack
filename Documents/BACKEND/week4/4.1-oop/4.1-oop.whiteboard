[deck]
readonly = true
cssfile = ../basestyle.css

[slide]
title=4.1 - Object Oriented Programming


[slide]
title=This course has been going fast
markdown : '''
![python](file://./images/lizard_go_fast.gif)
'''

[slide]
title=Remember - Hang in there!
markdown : '''
You are learning 4 years in 4 months.

* It's hard. But you can do it!

* Ask questions. Study ahead. (Look at this weeks reading! Especially "Object
  Oriented Programming")

* Redo the in-class activities outside of class

* *Code and practice every day*

* You are learning a new way of thinking, your brain isn't used to this much
  change at once.
'''


[slide]
title=Python Concept Review
markdown : '''
![python](file://./images/python.gif)
'''

[slide]
title=Variables = Labeled buckets for data
markdown : '''
![buckets](file://./images/variable_buckets_transfer.png)
'''


[slide]
title=More data types
markdown : '''
In computer programming, we categorize each piece of different information or
data we deal with into something called a `type`

We store these different types into variables.

### Key word
* container - a data-type that can contain other data. Containers are "plural".
* index - All items in a list automatically get an index. This lets you access
  the "nth" item.
* key - How you "look up" data in a dictionary
* value - The "data" stored in the dictionary on the right hand side

### Container types
* list - Sequential data, e.g. a list of things. Order matters.
* dict - Short for dictionary. Almost like a group of variables together.
  "Associative" data, like its namesake. Order doesn't matter.
'''



[slide]
title=Python - Branching
markdown : '''
Branching (aka "control flow") represents the "decision making ability" of
coding. If-statements allow our code to do one thing in some circumstances, and
another thing in others. They are one of the fundamental building blocks of
computer programming.

### KEY TERMS:
* if / else - if-statements allows us to branch code into one or more
  possibilities
* branch - when talking about code we say it branches into different
  possibilities based on the values in variables
* indentation - Python syntax is based on indentation (spaces or tabs... STAY
  CONSISTENT!)
* condition - the bit in the if-statement that determines if one branch should
  be followed or a different one
* loop - A type of control flow that repeats code
* while loop - The most essential type of loop, resembles if statement, except
  it repeats the indented code until the condition no longer is true
'''

[slide]
title=Python - Branching
markdown : '''
![branching](file://./images/python_branch.jpg)
'''


[slide]
title=Python - While loop
markdown : '''
![branching](file://./images/python_loop.jpg)
'''

[slide]
title=For loops
markdown : '''
for loops are the most common type of loop, they allow us to "loop through"
iterable data-types

* This means we can write code that will apply to every item in a container
  data-type, such as lists or dicts

### KEY TERMS
* iterate - technical term for "code that repeats" (aka "loops")
* for loop - allows us to write code that will be sequentially looped over the
  contents of a list, dict, or range function (among others)
* iterable - a data-type we can "loop through" with a for-loop, aka "iterate
  through"
* range - a Python function that iterates over numbers
'''



[slide]
title=Functions
markdown : '''
We can insert variable values into the function when we are invoking them with
`parameters` and `arguments`.

### KEY TERMS
* DRY - Don't Repeat Yourself
* function - a bit of code that can be reused
* invoke - aka "to call", causing the code within a function to be run
* parameters - a type of variable associated with a function
* arguments - when calling a function, we can assign data into parameters with
  "arguments"
* default - if a parameter is not specified, then it gets a "default" value
* positional arguments - arguments specified by position
* keyword arguments - named arguments specified by assignment syntax
* return statement - tells the function to end, while "outputting" a value
* return value - data exiting a function
'''

[slide]
title=ACTIVITY 1 - review func for
editor=./activities/1_review_func_for.py
markdown : '''
# Python Warm Up!

### See if you can quickly do this short set of activities
'''


[slide]
title=SOLUTION 1 - review func for
editor=./solutions/1_review_func_for.py
terminal=./solutions/


[slide]
title=Python - Hospital
markdown : '''
We'll start today with an activity building a more realistic application in
Python

* Increasingly in class, we will be building larger applications during
  activities
'''


[slide]
title=ACTIVITY 2 - hospital
editor=./activities/2_hospital.py


[slide]
title=SOLUTION 2 - hospital
editor=./solutions/2_hospital.py
terminal=./solutions/

[slide]
title=OOP


#[slide]
#title=OOP
#markdown : '''
#I swear I'm not to make any more puns in class
#'''


[slide]
title=OOPs, I did it again!
markdown : '''
![britney](file://./images/britney.gif)
'''

[slide]
title=Leaving Britney (Puns) Alone...
markdown : '''
**Research & discuss** the following questions. Can you define the terms in
your own words?

* What is OOP?
* What is meant by a software programming "paradigm"?
* OOP paradigm
* Class
* Method
* Instance
* Object
* Constructor
* Property
'''


[slide]
title=Object Oriented Programming
markdown : '''
* **WARNING:** Object Oriented Programming is like ~80% terminology to memorize!

* A paradigm is an approach to programming

* OOP is this idea: Let's combine certain "shapes" of data with the
  functions that often use that data.

* This combination is called a "class" (in Python: basically synonymous with
  the words "type" or "data type")

* From classes, we can "construct" instances.
'''


[slide]
title=class = blueprints
markdown : '''
![blueprints](file://./images/blueprints.jpg)
'''


[slide]
title=instance = constructed buildings
markdown : '''
![suburbia](file://./images/suburbia.jpg)
'''


[slide]
title=OOP Terminology
markdown : '''

Object Oriented Programming is a bunch of new terminology:

## Key Terms
* OOP - Object Oriented Programming - a way of thinking and arranging data in
  programming
* class - classes form "blueprints" for creating new object instances, example
  "User" (basically synonymous with "type" or "data-type")
* object instance - a specific occurrence of a class, example "janeqhacker is
  an instance of User"
* instantiating - the act of creating a new object (invokes constructor)
* method - a function attached to an instance
* property - data attached to an instance
* constructor - the method that sets up a brand new object
'''


[slide]
title=DEMO: Class
editor=./demos/user_class.py
terminal=./demos/



[slide]
title=ACTIVITY 3 - OOP hospital
editor=./activities/3_oop_hospital.py


[slide]
title=SOLUTION 3 - OOP hospital
editor=./solutions/3_oop_hospital.py
terminal=./solutions/


[slide]
title=OOPidy scOOP - Kanye
markdown : '''
![kanye](file://./images/kanye_west.png)
'''


[slide]
title=More OOP
markdown : '''
More OOP terminology: "inheritance", aka "extension".

If we have a class that has a lot of similarities to another class, but has a
few differences, instead of starting from scratch, we can "inherit" which
allows us to stay DRY.

## Key Terms
* inheritance - Classes can "inherit" (synonym: "extend") other classes. This
  copies everything about one class into a new one.

* sub class - The class that is doing the copying (inherited from) (aka child
  class or derived class)

* base class - The class that is getting copied from (inherited from) (aka
  parent class or super class)

* override - When a subclass "replaces" a method in the base class

* `super()` - A feature of Python that lets you access the base class, just in
  case you override something you still want

* `static` - A method attached to the class, instead of the instance
'''


[slide]
title=subclasses = variations on the blueprints
markdown : '''
![multiple_blueprints](file://./images/multiple_blueprints.jpg)
'''



[slide]
title=DEMO: Sub-Class
editor=./demos/user_class.py
terminal=./demos/



[slide]
title=ACTIVITY 4 - OOP ER
editor=./activities/4_oop_er.py


[slide]
title=SOLUTION 4 - OOP ER
editor=./solutions/4_oop_er.py
terminal=./solutions/


[slide]
title=Software architecture


[slide]
title=Software architecture - class diagrams
markdown : '''
"Class diagrams" are another tool in the code-planning toolbox

![inheritance](file://./images/class_inheritance.jpg)
'''


[slide]
title=Your turn!
markdown : '''
...but don't go overboard with diagramming...

![inheritance](file://./images/complicated_class_diagram.png)
'''


[slide]
title=Dia example
markdown : '''
![company](file://./images/company.png)
'''


[slide]
title=DISCUSSION: Diagram the following
markdown : '''
1. First, discuss how you might diagram each of these with someone next to you

2. Then, try diagramming each one

Using a pen and paper (or a graphical tool, such as Dia)

* Students (think about: students, courses, assignments)

* Employees at a corporation (think about: employees, managers, positions,
  unfilled positions)

* Twitter (think about: users, tweets, follows)

* GitHub (think about: users, repos, pull requests)

* Netflix (think about: movies, TV series, users, who watched what, preferences)
'''

[slide]
title=Example diagrams
markdown : '''
* Employees at a corporation (think about: employees, managers, positions,
  unfilled positions)

* Students (think about: students, courses, assignments)

* Twitter (think about: users, tweets, follows)

* GitHub (think about: users, repos, pull requests)

* Netflix (think about: movies, TV series, users, who watched what, preferences)
'''

[slide]
title=Example solution diagrams (made with Dia)

[slide]
title=Students example
markdown : '''
![students](file://./solution_diagrams/students.png)
'''


[slide]
title=Twitter example
markdown : '''
![Twitter](file://./solution_diagrams/twitter.png)
'''


[slide]
title=GitHub example
markdown : '''
![GitHub](file://./solution_diagrams/github.png)
'''


[slide]
title=Netflix example
markdown : '''
![netflix](file://./solution_diagrams/netflix.png)
'''




[slide]
title=ACTIVITY 5 - code diagram
markdown : '''
![company](file://./images/company.png)

Take one of these diagrams... and start coding it! Just think first about
creating necessary classes with the right properties.
'''
editor=./activities/5_code_from_diagram.py


[slide]
title=SOLUTION 5 - code diagram
editor=./solutions/5_code_from_diagram.py


