[deck]
readonly = true
cssfile = ../basestyle.css

[slide]
title=4.2 - Import

[slide]
title=ACTIVITY 1 - game
markdown : '''
* See `1_game.txt` for full details

* Remember to use pseudocode, state diagrams, and possibly class diagrams.

* **Pick one** - Do multiple only if you finish early

### Trivia (Easiest)
Make a trivia game! You have the skills to do this. It should ask a series of
questions, such as about capitals of countries, and check if the user entered
the right thing.

### Anagrams
This game must display a word, except the letters will be scrambled in a random
order. The user must then type in what they think the word is.

### Hangman
Make a hangman game. If you feel stuck starting from scratch, see the bonus
activity from last lesson.
'''


[slide]
title=SOLUTION 1 - game review
editor=./solutions/1_games/anagrams.py,./solutions/1_games/hangman.py,./solutions/1_games/trivia.py
terminal=./solutions/

[slide]
title=Import: The Three Types of Modules
markdown : '''
The `import` statement lets us gain access to more functions and methods.
Three sources to `import` code:

1. Code files
    - Code we wrote, but broke into separate files
2. Standard library
    - Code Python developers wrote and let us use
3. Downloaded from PyPI
    - Code other developers wrote and put under free/libre software licenses
'''


[slide]
title=Type 1: Code Module Files
markdown : '''
Sometimes code gets so complicated that we need more than one file to hold it.

- the `import` statement lets one file gain access to the code in another file.

- 'module' is the term for, essentially a file that has code in it that other
  files will be gaining access to

### Key terms
* library - code that someone else wrote that you can use in your project
* module - a collection of code in a file that can be used by other files
* import - gaining access to a module into your code
'''



[slide]
title=ACTIVITY 2 - mod challenge
editor=./activities/2_modules/mod_challenge.py


[slide]
title=SOLUTION 2 - mod challenge
editor=./solutions/2_modules/mod_challenge.py
terminal=./solutions/2_modules/


[slide]
title=Type 2: Standard library
markdown : '''
Python comes with MANY built-in modules that you can import, written by the
Python developers.

### Key terms
* standard library - modules that come "pre-installed" with a programming
  language
* batteries included - the Python philosophy that the standard library (what
  comes with Python) should have lots of functionality built-in, just 1 import
  away
'''
browser = https://docs.python.org/3/library/



[slide]
title=ACTIVITY 3 - standard library
editor=./activities/3_standard_library.py


[slide]
title=SOLUTION 3 - standard library
editor=./solutions/3_standard_library.py
terminal=./solutions/


[slide]
title=Type 3: Downloaded from PyPI


[slide]
title=PyPI
browser=http://pypi.python.org/
markdown : '''
Python Package Index (PyPI) is a big repository of free software Python
libraries
'''


[slide]
title=PyPI Key Terms
markdown : '''
Term overload!

**Pipenv** is a tool for downloading software packages from **PyPI** (the
website and repository). It downloads them into directories known as a
**virtualenv**. It is best practice to make one of these for each project you
work on, to keep the different downloads separate. This is because each project
might have different needs from PyPI.

### Key Terms
* PyPI - a giant repository of free, open source libraries that various people
  around the world have written, for use in your code
* Pipenv - one of several tools for downloading and using modules from PyPI
* virtualenv - the place on your computer where third party libraries go when
  downloaded from PyPI. Pipenv automatically creates these for each project you
  are working on.
'''


[slide]
title=DEMO: Pipenv
terminal=./demos/
markdown : '''
Steps:

Initialize new project virtualenv (ONLY do in your project directory):

`pipenv --python 3.6`

Enter virtualenv:

`pipenv shell`

Download & install package:

`pipenv install silly`
'''


[slide]
title=ACTIVITY 4: pipenv and pypi
editor=./activities/4_pipenv_and_pypi.txt
markdown : '''
Steps:

Initialize new project virtualenv (ONLY do in your project directory):

`pipenv --python 3.6`

Enter virtualenv:

`pipenv shell`

Download & install package:

`pipenv install silly`
'''

[slide]
title=ACTIVITY 5 - PyPI practice
editor=./activities/5_pypi_practice/run.py
markdown : '''
Steps:

Initialize new project virtualenv (ONLY do in your project directory):

`pipenv --python 3.6`

Enter virtualenv:

`pipenv shell`

Download & install packages:

`pipenv install` (some package name)
'''


[slide]
title=SOLUTON 5 - PyPI practice
editor=./solutions/5_pypi_practice/run.py
terminal=./solutions/


[slide]
title=Questions?




