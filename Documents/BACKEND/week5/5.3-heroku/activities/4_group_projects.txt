Lightning Projects with Django & APIs

1. Form your group. Groups should be 3-4 people. If you have 2 people,
merge with another group. Groups will be randomly assigned.

2. Agree on 2 different APIs. A great, huge list of public APIs is here,
but you can use whatever: https://github.com/toddmotto/public-apis

3. Agree on an application that uses these APIs. It might just display
data from each one, or it may attempt to combine data between them in
some clever way.

4. Form into the following roles: 1-2 API engineers (one for each APIs),
front-end engineer, and backend-engineer.

5. Get to work! The work for each of the roles is explained below:


API Engineer:
- Your goal is to get a "proof of concept" for the API working so that
  it fetches the desired necessary data using the Python requests
  package.
- The coolest / most powerful API's tend to be restricted with API keys
  and secret keys. These are not anonymously available, instead require
  you to sign up and get an API key and secret key (essentially,
  username/password for APIs).
- Don't worry about the styling or Django aspects. Just make sure you
  are getting the right information for your project. Possibly: Build a
  for loop around it proving you are getting the right info.
- If you can get a single proof of concept working with requests or even
  curl or the browser, go ahead and send the resulting data over to the
  backend engineer. They can use this data as "dummy data" to get
  started with integrating everything, only dropping your requests code
  when the time comes.
- If you have time, put your API code into a function that cleanly
  retrieves the data from the website.

Front-End Engineer:
- Find a nice Bootstrap template, or build your own from scratch, kind
  of like HW 1.
- If you used a pre-built template: Bootstrap templates in the wild are
  filled with the "weeds" of unnecessary code. Hack away until you have
  something clean and usable.
- Start putting in your Django (same as Jinja) templating code - you
  should be looping through the data that will eventually be generated
  by the API

Back-End Engineer:
- Your goal is to tie everything together and get the Django project up
  and running.
- Start with the example project found in the "minidjango" directory.
  This is almost the same as the code we researched in 2-django-improved
  Make sure you understand what is happening here.
- Add and delete views / urls as necessary until you have the necessary
  shape for your project.
- Work closely with the front-end engineer to ensure you are sending the
  right context to their templates.
- Work closely with the API engineer(s) to get demo data set up in lieu
  of the complete project working.
- When the time comes, make sure you can deploy your project to Heroku.
  Read the "github_deployment_guide.txt"

